plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
}

configurations {
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    dev
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    useFabricMixin = true
    mixinConfig "apugli.mixins.json"
    mixinConfig "apugli.mixins.forge.json"

    launches {
        client {
            property 'mixin.debug', 'true'
        }
    }
}

repositories {
    maven { url 'https://maven.theillusivec4.top' }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

if (rootProject.file("run/log4j.xml").exists())
    loom.log4jConfigs.from(rootProject.file("run/log4j.xml"))

dependencies {
    minecraft("com.mojang:minecraft:${rootProject.architectury.minecraft}")
    mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}"
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "me.shedaniel:architectury-forge:${rootProject.architectury_version}"
    modApi "me.shedaniel.cloth:cloth-config-forge:${rootProject.clothconfig_version}"
    modApi "top.theillusivec4.caelus:caelus-forge:${rootProject.caelus_forge_version}"
    modApi group: 'com.github.EdwinMindcraft.origins-architectury', name: 'Origins-1.16.5-forge', version: "${rootProject.origins_architectury_version}"

    implementation(project(path: ":common")) {
        transitive = false
    }
    developmentForge(project(path: ":common")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}
shadowJar {
    exclude "fabric.mod.json"
    exclude "origins.accessWidener"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

jar {
    classifier "dev"
}

java {
    withSourcesJar()
}

sourcesJar {
    def commonSources = project(":common").remapSourcesJar
    dependsOn commonSources
    from zipTree(commonSources.output)
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                classifier null
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
