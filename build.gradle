plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '2.1.1'
	id "com.github.breadmoirai.github-release" version "2.2.12"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = "Ladysnake Libs"
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
	}
	maven {
		name = "JitPack"
		url = 'https://jitpack.io'
	}
	maven {
		url = 'https://maven.cafeteria.dev'
		content {
			includeGroup 'net.adriantodt.fabricmc'
		}
	}
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	maven {
		url "https://maven.shedaniel.me/"
	}
	maven {
		url "https://maven.terraformersmc.com/"
	}
}

loom {
	accessWidenerPath = file("src/main/resources/apugli.accesswidener")
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "com.github.apace100:apoli:${project.apoli_version}"

	modImplementation "com.jamieswhiteshirt:reach-entity-attributes:${project.reach_version}"

	implementation("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}")
	annotationProcessor("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}")
	include("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}")
}

String generateMarkdownChangelog() {
	String changelogText = ""

	File file = file("${projectDir}/changelog.txt")
	if(file.exists()) {
		List<String> stringList = file.readLines();
		for (int i = 0; i < stringList.size(); ++i) {
			String line = stringList.get(i)
			if(!line.isBlank()) {
				changelogText += "${line.stripIndent()}"
			}
			if (i < stringList.size() - 1) {
				changelogText += "\n"
			}
		}
	}
	return changelogText
}

githubRelease {
	if (System.getenv("GITHUB_TOKEN") != null) {
		token = System.getenv("GITHUB_TOKEN")

		owner = project.gh_owner
		repo = project.gh_repo
		tagName = "v${project.mod_version}"
		targetCommitish = project.gh_target_commitish

		body = generateMarkdownChangelog()

		overwrite = true

		releaseName = "${project.mod_name} v${project.mod_version} (MC ${project.gh_minecraft_versions})"

		releaseAssets = files("${project.buildDir}/libs/${archivesBaseName}-${version}.jar", "${project.buildDir}/libs/${archivesBaseName}-${version}-sources.jar").files
	}
}

curseforge {
	if (System.getenv("CURSEFORGE_API_KEY") != null && project.hasProperty("cf_project_id")) {
		apiKey = System.getenv("CURSEFORGE_API_KEY")

		project {
			id = project.cf_project_id
			releaseType = project.cf_release_type
			if (project.hasProperty("cf_game_versions")) {
				def gameVersions = project.cf_game_versions.split(", ")
				gameVersions.each { String gameVersion ->
					addGameVersion gameVersion
				}
			}
			if (project.hasProperty("cf_java_versions")) {
				def gameVersions = project.cf_java_versions.split(", ")
				gameVersions.each { String gameVersion ->
					addGameVersion gameVersion
				}
			}
			if (project.hasProperty("cf_modloader")) {
				def gameVersions = project.cf_modloader.split(", ")
				gameVersions.each { String gameVersion ->
					addGameVersion gameVersion
				}
			}
			addGameVersion project.cf_modloader
			mainArtifact(remapJar) {
				displayName = "${project.mod_name} v${project.mod_version} (Fabric ${project.cf_minecraft_versions})"
				relations {
					if(project.hasProperty("cf_required_dependencies")) {
						project.cf_required_dependencies.split(", ").each { String slug ->
							requiredDependency slug
						}
					}
				}
			}
			changelog = generateMarkdownChangelog()
			changelogType = 'markdown'
		}
		options {
			forgeGradleIntegration = false
		}
	}
}

import com.modrinth.minotaur.dependencies.ModDependency
modrinth {
	if(System.getenv("MODRINTH_TOKEN") != null && project.hasProperty("mr_project_id")) {
		token = System.getenv("MODRINTH_TOKEN")

		projectId = project.mr_project_id

		versionType = project.mr_version_type

		if(project.hasProperty("mr_modloader")) {
			loaders = project.mr_modloader.split(", ") as List
		}

		if(project.hasProperty("mr_release_versions")) {
			gameVersions = project.mr_release_versions.split(", ") as List
		}

		def deps = []

		if(project.hasProperty("mr_required_dependencies")) {
			project.mr_required_dependencies.split(", ").each { String slug ->
				deps << new ModDependency(slug, "required")
			}
		}

		dependencies = deps

		versionName = "${project.mod_name} v${project.mod_version} (Fabric ${project.mr_minecraft_versions})"

		versionNumber = "v${project.mod_version}"

		changelog = generateMarkdownChangelog()

		uploadFile = remapJar
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}

	def environment = System.getenv("ENVIRONMENT")
	if (environment != "production") {
		from(rootProject.rootDir.absolutePath + "/testdata") { into 'data' }
		from(rootProject.rootDir.absolutePath + "/testassets") { into 'assets'}
	}
}

tasks.named("processResources") {
	inputs.property("environment") {
		System.getenv("ENVIRONMENT") || null
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
